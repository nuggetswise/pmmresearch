#!/usr/bin/env python3
"""
Debug version of testprompt3 with detailed logging
"""

import asyncio
import time
from datetime import datetime
from advanced_research import advanced_researcher

async def debug_testprompt3():
    """Debug testprompt3 with detailed logging"""
    query = "Sage Intacct wants to focus on selling to SMB & Mid sized Healthcare companies. What is the competition that we could come across in this space"
    
    print("üîç DEBUG: Starting testprompt3 with detailed logging...")
    print(f"üîç DEBUG: Query: {query}")
    print("=" * 60)
    
    try:
        start_time = time.time()
        
        # Stage 1: Research Planning
        print("üîç DEBUG: Starting Stage 1 - Research Planning...")
        stage1_start = time.time()
        
        sub_questions = await advanced_researcher.research_planner(query, "testprompt3")
        print(f"üîç DEBUG: Stage 1 completed in {time.time() - stage1_start:.2f}s")
        print(f"üîç DEBUG: Generated {len(sub_questions)} sub-questions:")
        for i, q in enumerate(sub_questions[:3], 1):
            print(f"   {i}. {q[:50]}...")
        if len(sub_questions) > 3:
            print(f"   ... and {len(sub_questions) - 3} more")
        
        # Stage 2: Execution (with timeout)
        print("\nüîç DEBUG: Starting Stage 2 - Research Execution...")
        research_results = []
        
        for i, question in enumerate(sub_questions, 1):
            print(f"üîç DEBUG: Processing question {i}/{len(sub_questions)}: {question[:50]}...")
            question_start = time.time()
            
            try:
                # Add timeout for each question
                result = await asyncio.wait_for(
                    advanced_researcher.execution_agent(question, "testprompt3"),
                    timeout=60  # 60 second timeout per question
                )
                question_time = time.time() - question_start
                print(f"üîç DEBUG: Question {i} completed in {question_time:.2f}s")
                research_results.append(result)
                
            except asyncio.TimeoutError:
                print(f"‚ùå DEBUG: Question {i} timed out after 60s")
                result = {
                    "question": question,
                    "summary": f"Research timed out for: {question}",
                    "sources": [],
                    "source_count": 0
                }
                research_results.append(result)
                
            except Exception as e:
                print(f"‚ùå DEBUG: Question {i} failed: {e}")
                result = {
                    "question": question,
                    "summary": f"Research failed: {str(e)}",
                    "sources": [],
                    "source_count": 0
                }
                research_results.append(result)
        
        # Stage 3: Publishing
        print("\nüîç DEBUG: Starting Stage 3 - Research Publishing...")
        stage3_start = time.time()
        
        final_report = await advanced_researcher.research_publisher(query, research_results, "testprompt3")
        
        stage3_time = time.time() - stage3_start
        total_time = time.time() - start_time
        print(f"üîç DEBUG: Stage 3 completed in {stage3_time:.2f}s")
        print(f"üîç DEBUG: Total time: {total_time:.2f}s")
        
        # Save to file
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"testprompt3_debug_result_{timestamp}.md"
        
        content = f"""# testprompt3 Debug Result - Sage Intacct Healthcare Competition

**Query:** {query}  
**Test Date:** {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}  
**Model:** {final_report.get('model', 'Unknown')}  
**Total Time:** {total_time:.2f}s  
**Questions Processed:** {len(research_results)}  

---

{final_report.get('content', 'No content available')}

---

*Generated by PMM Research Agent - testprompt3 (Debug Version)*
"""
        
        with open(filename, 'w', encoding='utf-8') as f:
            f.write(content)
        
        print(f"‚úÖ DEBUG: testprompt3 completed! Saved to: {filename}")
        return filename
        
    except Exception as e:
        print(f"‚ùå DEBUG: testprompt3 failed: {e}")
        import traceback
        traceback.print_exc()
        return None

if __name__ == "__main__":
    asyncio.run(debug_testprompt3()) 